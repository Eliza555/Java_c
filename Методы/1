Примеры использования перегрузки и переопределения методов

В Java существуют два основных механизма для реализации полиморфизма: перегрузка методов (method overloading) и переопределение методов (method overriding). Рассмотрим каждый из них с примерами.

Перегрузка методов (Method Overloading)

Перегрузка методов позволяет создавать несколько методов с одинаковым именем в одном классе, но с разными параметрами (различающимися по количеству или типу). Компилятор определяет, какой метод вызвать, исходя из списка аргументов при вызове.

### Пример перегрузки методов

public class Calculator {

    // Метод для сложения двух целых чисел
    public int add(int a, int b) {
        return a + b;
    }

    // Перегруженный метод для сложения трех целых чисел
    public int add(int a, int b, int c) {
        return a + b + c;
    }

    // Перегруженный метод для сложения двух чисел с плавающей точкой
    public double add(double a, double b) {
        return a + b;
    }

    public static void main(String[] args) {
        Calculator calc = new Calculator();

        int sum1 = calc.add(2, 3);           // Вызов метода add(int, int)
        int sum2 = calc.add(1, 4, 5);        // Вызов метода add(int, int, int)
        double sum3 = calc.add(2.5, 3.7);    // Вызов метода add(double, double)

        System.out.println("Сумма 2 + 3 = " + sum1);
        System.out.println("Сумма 1 + 4 + 5 = " + sum2);
        System.out.println("Сумма 2.5 + 3.7 = " + sum3);
    }
}


Вывод:

Сумма 2 + 3 = 5
Сумма 1 + 4 + 5 = 10
Сумма 2.5 + 3.7 = 6.2


В данном примере метод add перегружен трижды:

1. Принимает два целых числа.
2. Принимает три целых числа.
3. Принимает два числа с плавающей точкой.

Переопределение методов (Method Overriding)

Переопределение методов позволяет подклассу предоставить специфичную реализацию метода, который уже определен в его суперклассе. Для переопределения метода необходимо, чтобы сигнатуры методов в суперклассе и подклассе совпадали.

Пример переопределения методов

// Суперкласс
class Animal {
    public void makeSound() {
        System.out.println("Животное издает звук");
    }
}

// Подкласс
class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Собака лает: Гав-гав!");
    }
}

// Еще один подкласс
class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Кошка мяукает: Мяу!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal genericAnimal = new Animal();
        Animal dog = new Dog();
        Animal cat = new Cat();

        genericAnimal.makeSound(); // Вызов метода из Animal
        dog.makeSound();           // Вызов переопределенного метода из Dog
        cat.makeSound();           // Вызов переопределенного метода из Cat
    }
}


Вывод:

Животное издает звук
Собака лает: Гав-гав!
Кошка мяукает: Мяу!

В этом примере класс Animal имеет метод makeSound(), который переопределяется в подклассах Dog и Cat. При вызове метода makeSound() для объектов dog и cat выполняются соответствующие переопределенные версии методов.

Ключевые отличия

- Перегрузка методов происходит в пределах одного класса и зависит от различий в параметрах методов.
- Переопределение методов происходит между суперклассом и подклассом, и позволяет подклассу предоставить специфичную реализацию метода.

