Практика #2

### Использование final в объявлении параметра исключения
public class FinalCatchDemo {
    public static void main(String[] args) {
        try {
            // Генерация исключения
            throw new Exception("Пример исключения");
        } catch (final Exception e) {
            System.out.println("Перехвачено исключение: " + e.getMessage());
            
            // Попытка изменить ссылку e приведет к ошибке компиляции
            // e = new Exception("Новая ошибка"); // Это вызовет ошибку
        }
    }
}


Пояснение:

- Что означает final в catch (final Exception e)?
  
  - Ключевое слово final в объявлении параметра e делает ссылку на объект исключения неизменяемой внутри блока catch. Это означает, что вы не можете переназначить e на другой объект внутри блока catch.
  
  - Например, следующая строка приведет к ошибке компиляции:

    e = new Exception("Новая ошибка"); // Ошибка: нельзя присвоить значение final переменной e
    
  
  - Применение final полезно в следующих случаях:
    1. Безопасность: Предотвращает случайные изменения ссылки на исключение внутри б
лока catch.
    2. Анонимные внутренние классы: Если вы используете параметры catch внутри анонимных внутренних классов (например, лямбда-выражений или классов), до Java 8 они должны быть final или эффективно final. Хотя с Java 8 это требование несколько ослаблено, явное использование final может повысить читаемость и ясность кода.

  - Пример использования final:

    try {
        // Код, который может выбросить исключение
    } catch (final IOException e) {
        // Обработка исключения
    }

  - Важно отметить:
    - final не делает объект исключения неизменяемым. Вы можете изменять состояние объекта e (если это возможно), но не можете переназначить переменную e на другой объект.
