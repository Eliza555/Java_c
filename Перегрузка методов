
Класс A с перегруженными методами:

public class A {
    public void printNum(Integer i) {
        System.out.printf("Integer = %d%n", i);
    }
    public void printNum(int i) {
        System.out.printf("int = %d%n", i);
    }
    public void printNum(Float f) {
        System.out.printf("Float = %.4f%n", f);
    }
    public void printNum(Number n) {
        System.out.println("Number=" + n);
    }
}

public class Main {
    public static void main(String[] args) {
        A a = new A();
        Number[] num = {new Integer(1), 11, 1.11f, 11.11};
        // цикл for (1)
        for (Number n : num) {
            a.printNum(n);
        }
        // (2)
        a.printNum(new Integer(1));
        a.printNum(11);
        a.printNum(1.11f);
        a.printNum(11.11);
    }
}


Почему различается поведение

1. Разрешение перегрузок методов происходит на этапе компиляции, исходя из статического (компилируемого) типа аргументов.

2. В цикле for (1) переменная n имеет тип Number, независимо от того, какой объект реально находится внутри массива. Следовательно, для всех итераций цикла будет вызван метод printNum(Number n).

3. В отдельных вызовах (2) аргументы имеют различные статические типы, известные на этапе компиляции:
- new Integer(1) имеет тип Integer.
- 11 — это int (примитивный тип).
- 1.11f — это float.
- 11.11 — это double.

Для этих вызовов компилятор выбирает наиболее специфичный метод из доступных перегруженных, основываясь на типах аргументов.

Различие в выводах обусловлено статическим типом аргументов при вызове методов. В цикле for переменная n имеет тип Number, поэтому всегда вызывается метод printNum(Number n),
независимо от реального типа объекта. В отдельных вызовах компилятор выбирает наиболее специфичный метод на основе статического типа передаваемого аргумента.
