Практика #2
Изменение спецификаторов доступа private, protected, public и спецификатора по умолчанию при наследовании

Рассмотрим следующие классы:

class A {
    int a1;               // Спецификатор по умолчанию (package-private)
    public int a2;        // Публичный
    protected int a3;     // Защищённый
    private int a4;       // Приватный

    void method1() { ... }               // Спецификатор по умолчанию
    public void method2() { ... }        // Публичный
    protected void method3() { ... }     // Защищённый
    private void method4() { ... }       // Приватный
}

class B extends A {
    ...
}

class C extends B {
    ...
}

Правила видимости при наследовании:

1. public:
   - Поля и методы с публичным доступом доступны во всех классах, независимо от пакета.
   - Подклассы могут свободно наследовать и использовать публичные члены родительского класса.
   
2. protected:
   - Доступны в рамках пакета и для подклассов, даже если они находятся в другом пакете.
   - Подклассы могут наследовать и использовать защищённые члены.

3. Спецификатор по умолчанию (package-private):
   - Доступны только внутри того же пакета.
   - Подклассы, находящиеся в другом пакете, не имеют доступа к этим членам.

4. private:
   - Доступны только внутри самого класса.
   - Наследование: приватные члены не наследуются. Подклассы не могут напрямую обращаться к приватным полям и методам родительского класса.

Применение к классам A, B и C:

1. Класс B (подкласс A):

   - Доступные поля:
     - a2 (public)
     - a3 (protected)
     - a1 (package-private) — только если B находится в том же пакете, что и A.
     - a4 (private) — недоступно.

   - Доступные методы:
     - method2() (public)
     - method3() (pro
tected)
     - method1() (package-private) — только если B в том же пакете.
     - method4() (private) — недоступен.

2. Класс C (подкласс B):

   - Наследует все публичные и защищённые члены от A через B.
   - Доступные поля:
     - a2 (public)
     - a3 (protected)
     - a1 — зависит от пакета. Если C находится в том же пакете, что и A, то доступен; иначе — нет.
     - a4 — недоступно.

   - Доступные методы:
     - method2() (public)
     - method3() (protected)
     - method1() — зависит от пакета.
     - method4() — недоступен.

Пример использования:

// Предположим, что классы A, B и C находятся в пакете com.example

package com.example;

class A {
    int a1;               // package-private
    public int a2;        // public
    protected int a3;     // protected
    private int a4;       // private

    void method1() { ... }               // package-private
    public void method2() { ... }        // public
    protected void method3() { ... }     // protected
    private void method4() { ... }       // private
}

class B extends A {
    void demo() {
        // Доступ к полям
        System.out.println(a2); // OK
        System.out.println(a3); // OK
        System.out.println(a1); // OK (только если в том же пакете)
        // System.out.println(a4); // Ошибка: a4 недоступен

        // Вызов методов
        method2(); // OK
        method3(); // OK
        method1(); // OK (только если в том же пакете)
        // method4(); // Ошибка: method4 недоступен
    }
}

class C extends B {
    void demo() {
        // Доступ к полям
        System.out.println(a2); // OK
        System.out.println(a3); // OK
        // System.out.println(a1); // Ошибка, если C в другом пакете
        // System.out.println(a4); // Ошибка: a4 недоступен

        // Вызов методов
        method2(); // OK
        method3(); // OK
        // method1(); // Ошибка, если C в другом пакете
        // method4(); // Ошибка: method4 недоступен
    }
}


Особенности:

- Переопределение методов:
  - Подкласс может переопределять только public и protected методы родительского класса.
  - При переопределении метод не может иметь более широкий доступ, чем у метода в родительском классе. Например, нельзя переопределить protected метод родителя как private.
  
- Доступ к приватным членам:
  - Хотя приватные поля и методы недоступны напрямую в подклассе, можно использовать public или protected методы родительского класса для взаимодействия с ними.

Итог

При наследовании в Java:

- public члены доступны во всех подклассах и классах.
- protected члены доступны в подклассах и внутри пакета.
- Спецификатор по умолчанию (package-private) позволяет доступ только внутри одного пакета.
- private члены не наследуются и недоступны в подклассах.
