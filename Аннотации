Объясните, зачем нужны следующие аннотации и приведите примеры их использования.

@Override
@Deprecated
@SuppressWarnings

1. @Override

 Назначение
Аннотация @Override используется для указания, что метод переопределяет метод из суперкласса или реализует метод из интерфейса. Это помогает предотвратить ошибки, связанные с неверным именованием методов или несоответствием сигнатур.

Преимущества
- Проверка компилятором: Компилятор проверяет, действительно ли метод переопределяет метод суперкласса. Если метод не переопределяет никакой метод, компилятор выдаст ошибку.
- Повышение читаемости: Явное указание на переопределение облегчает понимание кода для других разработчиков.

 Пример использования

// Суперкласс
public class Animal {
    public void makeSound() {
        System.out.println("Животное издает звук.");
    }
}

// Подкласс, переопределяющий метод makeSound
public class Dog extends Animal {
    
    @Override
    public void makeSound() {
        System.out.println("Собака лает: Гав-гав!");
    }
    
    // Попытка переопределить несуществующий метод (компилятор выдаст ошибку)
    /*
    @Override
    public void makeSound(String sound) {
        System.out.println("Неизвестный звук.");
    }
    */
}

// Класс для тестирования
public class Main {
    public static void main(String[] args) {
        Animal myAnimal = new Animal();
        myAnimal.makeSound(); // Вывод: Животное издает звук.
        
        Dog myDog = new Dog();
        myDog.makeSound();    // Вывод: Собака лает: Гав-гав!
    }
}


### Вывод программы

Животное издает звук.
Собака лает: Гав-гав!


Пояснения:
- В классе Dog метод makeSound помечен аннотацией @Override, что указывает на переопределение метода из класса Animal.
- Если бы изменили сигнатуру метода, например, добавили параметр, как показано в закомментированном блоке, компилятор выдал бы ошибку, так как такого метода в суперклассе нет.

---

2. @Deprecated

 Назначение
Аннотация @Deprecated используется для пометки элементов кода (классов, методов, полей), которые устарели и больше не рекомендуются к использованию. Это сигнал для разработчиков о том, что следует избегать использования этих элементов, так как они могут быть удалены в будущих версиях.

 Преимущества
- Предупреждение разработчиков: При использовании устаревших элементов компилятор генерирует предупреждения, информируя о том, что следует использовать альтернативы.
- Поддержка миграции: Позволяет постепенно заменять устаревшие части кода без немедленного удаления.

 Пример использования

public class Calculator {
    
    /**
     * @deprecated Используйте метод {@link #add(double, double)} вместо этого.
     */
    @Deprecated
    public int add(int a, int b) {
        return a + b;
    }
    
    // Новый метод для сложения чисел с плавающей точкой
    public double add(double a, double b) {
        return a + b;
    }
}

// Класс для тестирования
public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        
        // Использование устаревшего метода
        int sumInt = calc.add(5, 10); // Компилятор выдаст предупреждение @Deprecated
        
        // Использование нового метода
        double sumDouble = calc.add(5.5, 10.3);
        
        System.out.println("Сумма целых чисел: " + sumInt);
        System.out.println("Сумма дробных чисел: " + sumDouble);
    }
}


 Вывод программы

Сумма целых чисел: 15
Сумма дробных чисел: 15.8


Пояснения:
- Метод add(int a, int b) помечен аннотацией @Deprecated, что указывает на его устаревание.
- В Javadoc добавлено пояснение с рекомендацией использовать новый мето
д add(double, double).
- При компиляции использование устаревшего метода вызовет предупреждение, информируя разработчика о необходимости перехода на новый метод.

---

 3. @SuppressWarnings

 Назначение
Аннотация @SuppressWarnings используется для подавления определённых предупреждений компилятора в указанном участке кода. Это может быть полезно, когда разработчик осознанно решает проигнорировать определённые предупреждения.

 Преимущества
- Чистота вывода компилятора: Позволяет скрыть несущественные предупреждения, чтобы сосредоточиться на более важных.
- Контроль над предупреждениями: Дает возможность локально подавлять предупреждения, не влияя на остальные части кода.

 Виды предупреждений
- "unchecked": Предупреждения о непроверенных операциях, например, при использовании обобщений без типов.
- "deprecation": Предупреждения об использовании устаревших методов или классов.
- "rawtypes": Предупреждения о использовании сырого типа (без обобщений).
- И другие.

 Пример использования
import java.util.ArrayList;
import java.util.List;

public class LegacyCode {
    
    @Deprecated
    public void oldMethod() {
        System.out.println("Это устаревший метод.");
    }
    
    @SuppressWarnings("deprecation")
    public void useOldMethod() {
        // Подавление предупреждения о де- deprecated методе
        oldMethod();
    }
    
    @SuppressWarnings("unchecked")
    public void uncheckedCast() {
        // Непроверенное приведение типов
        List rawList = new ArrayList();
        rawList.add("Строка");
        List<String> stringList = (List<String>) rawList; // Предупреждение "unchecked"
        
        for (String s : stringList) {
            System.out.println(s);
        }
    }
}

// Класс для тестирования
public class Main {
    public static void main(String[] args) {
        LegacyCode legacy = new LegacyCode();
        
        // Вызов метода с подавлением предупреждения
        legacy.useOldMethod();
        
        // Вызов метода с подавлением предупреждения о непроверенном приведении типов
        legacy.uncheckedCast();
    }
}

Аннотации @Override, @Deprecated и @SuppressWarnings играют важную роль в процессе разработки на Java, предоставляя механизмы для улучшения качества кода, предотвращения ошибок и управления предупреждениями компилятора. Правильное использование этих аннотаций способствует написанию более надежного и поддерживаемого кода.
