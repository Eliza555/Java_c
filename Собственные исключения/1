В Java создание собственного класса исключения позволяет более точно управлять ошибками, которые могут возникнуть в вашем приложении. 
Для этого вы можете создать класс, который наследуется от стандартных классов исключений, таких как Exception или RuntimeException.

Ниже приведен пример собственного класса исключения, который наследуется от класса Exception:

// Определение собственного класса исключения
public class InvalidAgeException extends Exception {

    // Конструктор без параметров
    public InvalidAgeException() {
        super("Возраст не может быть отрицательным или слишком высоким.");
    }

    // Конструктор с пользовательским сообщением
    public InvalidAgeException(String message) {
        super(message);
    }
}


Пояснения:

1. Наследование от Exception:
   - Класс InvalidAgeException наследуется от Exception, что делает его проверяемым (checked exception). Это означает, что метод, который может выбросить это исключение, должен либо обрабатывать его с помощью блока try-catch, либо объявлять его с помощью ключевого слова throws.

2. Конструкторы:
   - Без параметров: Предоставляет стандартное сообщение об ошибке.
   - С параметром String: Позволяет передать пользовательское сообщение при создании исключения.

Пример использования собственного исключения:

public class User {
    private String name;
    private int age;

    public User(String name, int age) throws InvalidAgeException {
        this.name = name;
        setAge(age);
    }

    public void setAge(int age) throws InvalidAgeException {
        if (age < 0 || age > 150) {
            throw new InvalidAgeException("Недопустимый возраст: " + age);
        }
        this.age = age;
    }

    // Остальные методы класса
}

public class Main {
    public static void main(String[] args) {
        try {
            User user = new User("Иван", -5);
        } catch (InvalidAgeException e) {
            System.out.println("Ошибка создания пользователя: " + e.getMessage());
        }
    }
}


Пояснения к примеру:

1. Класс User:
   - При создании объекта User вызывается метод setAge, который проверяет корректность возраста.
   - Если возраст некорректен (меньше 0 или больше 150), выбрасывается собственное исключение InvalidAgeException с соответствующим сообщением.

2. Класс Main:
   - При попытке создать пользователя с некорректным возрастом (-5) срабатывает блок catch, где выводится сообщение об ошибке.

Этот пример демонстрирует, как можно создавать и использовать собственные классы исключений для более точного управления ошибками в приложении.Собственные исключения
