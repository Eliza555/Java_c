В Java интерфейсы могут содержать вложенные классы. Все классы, объявленные внутри интерфейса, по умолчанию являются public и static. 
Такие вложенные классы часто используются для организации вспомогательных компонентов, которые логически связаны с интерфейсом.

 Пример: Вложенный класс в интерфейсе

Рассмотрим интерфейс Animal с вложенным классом Dog.

// Определение интерфейса с вложенным классом
public interface Animal {
    
    // Вложенный класс Dog
    public static class Dog {
        private String name;

        public Dog(String name) {
            this.name = name;
        }

        public void bark() {
            System.out.println(name + " говорит: Гав-гав!");
        }
    }

    // Абстрактный метод интерфейса
    void makeSound();
}


Использование вложенного класса

Чтобы создать экземпляр вложенного класса Dog и вызвать его методы, можно сделать следующее:

public class Main {
    public static void main(String[] args) {
        // Создание экземпляра вложенного класса Dog
        Animal.Dog myDog = new Animal.Dog("Бобик");
        
        // Вызов метода bark()
        myDog.bark();
        
        // Можно также реализовать интерфейс Animal
        Animal animal = new Animal() {
            @Override
            public void makeSound() {
                System.out.println("Животное издает звук.");
            }
        };
        
        animal.makeSound();
    }
}


Вывод программы

Бобик говорит: Гав-гав!
Животное издает звук.


Пояснения

1. Определение вложенного класса:
   - В интерфейсе Animal объявляется вложенный класс Dog.
   - Этот класс объявлен как public static, хотя ключевые слова public и static можно опустить, так как все вложенные классы в интерфейсе по умолчанию являются public и static.

2. Создание экземпляра вложенного класса:
   - Для создания экземпляра класса Dog используется синтаксис Animal.Dog myDog = new Animal.Dog("Бобик");.
   - Поскольку вложенный класс является static, его можно создать без наличия реализации интерфейса Animal.

3. Вызов методов вложенного класса:
   - После создания экземпляра myDog можно вызвать метод bark(), который выведет сообщение в консоль.

4. Реализация интерфейса:
   - В примере также показано, как можно реализовать интерфейс Animal и вызвать абстрактный метод makeSound().

 
