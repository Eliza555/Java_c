Практика #2
Пример переопределенного метода:

Переопределение метода (overriding) происходит, когда подкласс предоставляет свою реализацию метода, который уже определен в суперклассе. Метод должен иметь то же имя, параметры и тип возвращаемого значения или ковариантный тип.

// Суперкласс
class Animal {
    public void makeSound() {
        System.out.println("Животное издает звук");
    }
}

// Подкласс
class Dog extends Animal {
    @Override
    public void makeSound() { // Переопределенный метод
        System.out.println("Собака лает");
    }
}


Что будет, если у переопределенного и переопределяемого методов не совпадает тип возвращаемого значения?

Если тип возвращаемого значения отличается и не является ковариантным, компилятор выдаст ошибку.

class Animal {
    public void makeSound() {
        System.out.println("Животное издает звук");
    }
}

class Cat extends Animal {
    @Override
    public String makeSound() { // Ошибка: несовпадающий тип возвращаемого значения
        return "Кошка мяукает";
    }
}

Объяснение:
В примере выше метод makeSound в классе Cat пытается переопределить метод из Animal, но возвращает String вместо void. Это приведет к ошибке компиляции, так как тип возвращаемого значения не совпадает и не является ковариантным.
