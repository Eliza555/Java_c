Практика #3: Использование конструкции `this()` в конструкторах

Дано исходное объявление класса `A` с несколькими конструкторами:

class A {
    int a;
    int b;
    int c;
    int z;

    public A() {
        z = 1;
    }

    public A(int a) {
        this.a = a;
        z = 1;
    }

    public A(int a, int b) {
        this.a = a;
        this.b = b;
        z = 1;
    }

    public A(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
        z = 1;
    }
    // ...
}

Цель: Переписать конструкторы с использованием `this()` для сокращения кода и соблюдения принципа вызова конструктора `this()` первым и единственным оператором.

Переписанный код:

class A {
    int a;
    int b;
    int c;
    int z;

    // Конструктор с тремя параметрами
    public A(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.z = 1;
    }

    // Конструктор с двумя параметрами, вызывает конструктор с тремя параметрами
    public A(int a, int b) {
        this(a, b, 0); // Предполагаем значение по умолчанию для c
    }

    // Конструктор с одним параметром, вызывает конструктор с двумя параметрами
    public A(int a) {
        this(a, 0); // Предполагаем значение по умолчанию для b
    }

    // Конструктор без параметров, вызывает конструктор с одним параметром
    public A() {
        this(0); // Предполагаем значение по умолчанию для a
    }
    
    // Пример дополнительных методов или функциональности
    void display() {
        System.out.println("a: " + a + ", b: " + b + ", c: " + c + ", z: " + z);
    }
}

// Класс Main для демонстрации
public class Main {
    public static void main(String[] args) {
        A obj1 = new A();
        obj1.display(); // a: 0, b: 0, c: 0, z: 1

        A obj2 = new A(5);
        obj2.display(); // a: 5, b: 0, c: 0, z: 1

        A obj3 = new A(5, 10);
        obj3.display(); // a: 5, b: 10, c: 0, z: 1

        A obj4 = new A(5, 10, 15);
        obj4.display(); // a: 5, b: 10, c: 15, z: 1
    }
}

Объяснения:

1. Конструктор с максимальным числом параметров (`A(int a, int b, int c)`):
   - Инициализирует все поля.
   - Устанавливает `z = 1`.

2. Конструкторы с меньшим числом параметров используют `this()` для вызова более "полных" конструкторов:
   - `A(int a, int b)` вызывает `A(int a, int b, int c)` с `c = 0` (значение по умолчанию).
   - `A(int a)` вызывает `A(int a, int b)` с `b = 0` (значение по умолчанию).
   - `A()` вызывает `A(int a)` с `a = 0` (значение по умолчанию).

3. Преимущества такого подхода:
   - Уменьшается дублирование кода.
   - Облегчается поддержка и изменение конструкторов.
   - Логика инициализации централизована в одном конструкторе.

Вывод программы:
a: 0, b: 0, c: 0, z: 1
a: 5, b: 0, c: 0, z: 1
a: 5, b: 10, c: 0, z: 1
a: 5, b: 10, c: 15, z: 1
